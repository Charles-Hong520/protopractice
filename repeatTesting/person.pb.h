// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: person.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_person_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_person_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_person_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_person_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_person_2eproto;
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Address* Arena::CreateMaybeMessage<::Address>(Arena*);
template<> ::Person* Arena::CreateMaybeMessage<::Person>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Address) */ {
 public:
  inline Address() : Address(nullptr) {};
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreetFieldNumber = 1,
    kCityFieldNumber = 2,
    kStateFieldNumber = 3,
    kHistoryFieldNumber = 5,
    kZipcodeFieldNumber = 4,
  };
  // string street = 1;
  void clear_street();
  const std::string& street() const;
  void set_street(const std::string& value);
  void set_street(std::string&& value);
  void set_street(const char* value);
  void set_street(const char* value, size_t size);
  std::string* mutable_street();
  std::string* release_street();
  void set_allocated_street(std::string* street);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_street();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_street(
      std::string* street);
  private:
  const std::string& _internal_street() const;
  void _internal_set_street(const std::string& value);
  std::string* _internal_mutable_street();
  public:

  // string city = 2;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string state = 3;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_state();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_state(
      std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string history = 5;
  void clear_history();
  const std::string& history() const;
  void set_history(const std::string& value);
  void set_history(std::string&& value);
  void set_history(const char* value);
  void set_history(const char* value, size_t size);
  std::string* mutable_history();
  std::string* release_history();
  void set_allocated_history(std::string* history);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_history();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_history(
      std::string* history);
  private:
  const std::string& _internal_history() const;
  void _internal_set_history(const std::string& value);
  std::string* _internal_mutable_history();
  public:

  // int32 zipcode = 4;
  void clear_zipcode();
  ::PROTOBUF_NAMESPACE_ID::int32 zipcode() const;
  void set_zipcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zipcode() const;
  void _internal_set_zipcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr street_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr history_;
  ::PROTOBUF_NAMESPACE_ID::int32 zipcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// -------------------------------------------------------------------

class Person PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  inline Person() : Person(nullptr) {};
  virtual ~Person();

  Person(const Person& from);
  Person(Person&& from) noexcept
    : Person() {
    *this = ::std::move(from);
  }

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }
  inline Person& operator=(Person&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Person& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Person& a, Person& b) {
    a.Swap(&b);
  }
  inline void Swap(Person* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Person* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Person* New() const final {
    return CreateMaybeMessage<Person>(nullptr);
  }

  Person* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Person>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Person* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Person";
  }
  protected:
  explicit Person(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_person_2eproto);
    return ::descriptor_table_person_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgeFieldNumber = 2,
    kHobbyFieldNumber = 4,
    kAddrFieldNumber = 5,
  };
  // repeated int32 age = 2;
  int age_size() const;
  private:
  int _internal_age_size() const;
  public:
  void clear_age();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_age() const;
  void _internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_age();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 age(int index) const;
  void set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      age() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_age();

  // repeated string hobby = 4;
  int hobby_size() const;
  private:
  int _internal_hobby_size() const;
  public:
  void clear_hobby();
  const std::string& hobby(int index) const;
  std::string* mutable_hobby(int index);
  void set_hobby(int index, const std::string& value);
  void set_hobby(int index, std::string&& value);
  void set_hobby(int index, const char* value);
  void set_hobby(int index, const char* value, size_t size);
  std::string* add_hobby();
  void add_hobby(const std::string& value);
  void add_hobby(std::string&& value);
  void add_hobby(const char* value);
  void add_hobby(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hobby() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hobby();
  private:
  const std::string& _internal_hobby(int index) const;
  std::string* _internal_add_hobby();
  public:

  // repeated .Address addr = 5;
  int addr_size() const;
  private:
  int _internal_addr_size() const;
  public:
  void clear_addr();
  ::Address* mutable_addr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Address >*
      mutable_addr();
  private:
  const ::Address& _internal_addr(int index) const;
  ::Address* _internal_add_addr();
  public:
  const ::Address& addr(int index) const;
  ::Address* add_addr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Address >&
      addr() const;

  // @@protoc_insertion_point(class_scope:Person)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > age_;
  mutable std::atomic<int> _age_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hobby_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Address > addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_person_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// string street = 1;
inline void Address::clear_street() {
  street_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::street() const {
  // @@protoc_insertion_point(field_get:Address.street)
  return _internal_street();
}
inline void Address::set_street(const std::string& value) {
  _internal_set_street(value);
  // @@protoc_insertion_point(field_set:Address.street)
}
inline std::string* Address::mutable_street() {
  // @@protoc_insertion_point(field_mutable:Address.street)
  return _internal_mutable_street();
}
inline const std::string& Address::_internal_street() const {
  return street_.Get();
}
inline void Address::_internal_set_street(const std::string& value) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_street(std::string&& value) {
  
  street_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Address.street)
}
inline void Address::set_street(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Address.street)
}
inline void Address::set_street(const char* value,
    size_t size) {
  
  street_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Address.street)
}
inline std::string* Address::_internal_mutable_street() {
  
  return street_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_street() {
  // @@protoc_insertion_point(field_release:Address.street)
  return street_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_street(std::string* street) {
  if (street != nullptr) {
    
  } else {
    
  }
  street_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), street,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Address.street)
}
inline std::string* Address::unsafe_arena_release_street() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Address.street)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return street_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_street(
    std::string* street) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (street != nullptr) {
    
  } else {
    
  }
  street_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      street, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Address.street)
}

// string city = 2;
inline void Address::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:Address.city)
  return _internal_city();
}
inline void Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Address.city)
}
inline std::string* Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Address.city)
  return _internal_mutable_city();
}
inline const std::string& Address::_internal_city() const {
  return city_.Get();
}
inline void Address::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Address.city)
}
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Address.city)
}
inline void Address::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Address.city)
}
inline std::string* Address::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:Address.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Address.city)
}
inline std::string* Address::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Address.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Address.city)
}

// string state = 3;
inline void Address::clear_state() {
  state_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::state() const {
  // @@protoc_insertion_point(field_get:Address.state)
  return _internal_state();
}
inline void Address::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Address.state)
}
inline std::string* Address::mutable_state() {
  // @@protoc_insertion_point(field_mutable:Address.state)
  return _internal_mutable_state();
}
inline const std::string& Address::_internal_state() const {
  return state_.Get();
}
inline void Address::_internal_set_state(const std::string& value) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_state(std::string&& value) {
  
  state_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Address.state)
}
inline void Address::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Address.state)
}
inline void Address::set_state(const char* value,
    size_t size) {
  
  state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Address.state)
}
inline std::string* Address::_internal_mutable_state() {
  
  return state_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_state() {
  // @@protoc_insertion_point(field_release:Address.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Address.state)
}
inline std::string* Address::unsafe_arena_release_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Address.state)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return state_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_state(
    std::string* state) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (state != nullptr) {
    
  } else {
    
  }
  state_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      state, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Address.state)
}

// int32 zipcode = 4;
inline void Address::clear_zipcode() {
  zipcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address::_internal_zipcode() const {
  return zipcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Address::zipcode() const {
  // @@protoc_insertion_point(field_get:Address.zipcode)
  return _internal_zipcode();
}
inline void Address::_internal_set_zipcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zipcode_ = value;
}
inline void Address::set_zipcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zipcode(value);
  // @@protoc_insertion_point(field_set:Address.zipcode)
}

// string history = 5;
inline void Address::clear_history() {
  history_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Address::history() const {
  // @@protoc_insertion_point(field_get:Address.history)
  return _internal_history();
}
inline void Address::set_history(const std::string& value) {
  _internal_set_history(value);
  // @@protoc_insertion_point(field_set:Address.history)
}
inline std::string* Address::mutable_history() {
  // @@protoc_insertion_point(field_mutable:Address.history)
  return _internal_mutable_history();
}
inline const std::string& Address::_internal_history() const {
  return history_.Get();
}
inline void Address::_internal_set_history(const std::string& value) {
  
  history_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Address::set_history(std::string&& value) {
  
  history_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Address.history)
}
inline void Address::set_history(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  history_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Address.history)
}
inline void Address::set_history(const char* value,
    size_t size) {
  
  history_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Address.history)
}
inline std::string* Address::_internal_mutable_history() {
  
  return history_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Address::release_history() {
  // @@protoc_insertion_point(field_release:Address.history)
  return history_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_history(std::string* history) {
  if (history != nullptr) {
    
  } else {
    
  }
  history_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), history,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Address.history)
}
inline std::string* Address::unsafe_arena_release_history() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Address.history)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return history_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Address::unsafe_arena_set_allocated_history(
    std::string* history) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (history != nullptr) {
    
  } else {
    
  }
  history_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      history, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Address.history)
}

// -------------------------------------------------------------------

// Person

// repeated int32 age = 2;
inline int Person::_internal_age_size() const {
  return age_.size();
}
inline int Person::age_size() const {
  return _internal_age_size();
}
inline void Person::clear_age() {
  age_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::_internal_age(int index) const {
  return age_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Person::age(int index) const {
  // @@protoc_insertion_point(field_get:Person.age)
  return _internal_age(index);
}
inline void Person::set_age(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Set(index, value);
  // @@protoc_insertion_point(field_set:Person.age)
}
inline void Person::_internal_add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  age_.Add(value);
}
inline void Person::add_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_age(value);
  // @@protoc_insertion_point(field_add:Person.age)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::_internal_age() const {
  return age_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Person::age() const {
  // @@protoc_insertion_point(field_list:Person.age)
  return _internal_age();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::_internal_mutable_age() {
  return &age_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Person::mutable_age() {
  // @@protoc_insertion_point(field_mutable_list:Person.age)
  return _internal_mutable_age();
}

// repeated string hobby = 4;
inline int Person::_internal_hobby_size() const {
  return hobby_.size();
}
inline int Person::hobby_size() const {
  return _internal_hobby_size();
}
inline void Person::clear_hobby() {
  hobby_.Clear();
}
inline std::string* Person::add_hobby() {
  // @@protoc_insertion_point(field_add_mutable:Person.hobby)
  return _internal_add_hobby();
}
inline const std::string& Person::_internal_hobby(int index) const {
  return hobby_.Get(index);
}
inline const std::string& Person::hobby(int index) const {
  // @@protoc_insertion_point(field_get:Person.hobby)
  return _internal_hobby(index);
}
inline std::string* Person::mutable_hobby(int index) {
  // @@protoc_insertion_point(field_mutable:Person.hobby)
  return hobby_.Mutable(index);
}
inline void Person::set_hobby(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Person.hobby)
  hobby_.Mutable(index)->assign(value);
}
inline void Person::set_hobby(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Person.hobby)
  hobby_.Mutable(index)->assign(std::move(value));
}
inline void Person::set_hobby(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hobby_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Person.hobby)
}
inline void Person::set_hobby(int index, const char* value, size_t size) {
  hobby_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Person.hobby)
}
inline std::string* Person::_internal_add_hobby() {
  return hobby_.Add();
}
inline void Person::add_hobby(const std::string& value) {
  hobby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Person.hobby)
}
inline void Person::add_hobby(std::string&& value) {
  hobby_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Person.hobby)
}
inline void Person::add_hobby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hobby_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Person.hobby)
}
inline void Person::add_hobby(const char* value, size_t size) {
  hobby_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Person.hobby)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Person::hobby() const {
  // @@protoc_insertion_point(field_list:Person.hobby)
  return hobby_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Person::mutable_hobby() {
  // @@protoc_insertion_point(field_mutable_list:Person.hobby)
  return &hobby_;
}

// repeated .Address addr = 5;
inline int Person::_internal_addr_size() const {
  return addr_.size();
}
inline int Person::addr_size() const {
  return _internal_addr_size();
}
inline void Person::clear_addr() {
  addr_.Clear();
}
inline ::Address* Person::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:Person.addr)
  return addr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Address >*
Person::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:Person.addr)
  return &addr_;
}
inline const ::Address& Person::_internal_addr(int index) const {
  return addr_.Get(index);
}
inline const ::Address& Person::addr(int index) const {
  // @@protoc_insertion_point(field_get:Person.addr)
  return _internal_addr(index);
}
inline ::Address* Person::_internal_add_addr() {
  return addr_.Add();
}
inline ::Address* Person::add_addr() {
  // @@protoc_insertion_point(field_add:Person.addr)
  return _internal_add_addr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Address >&
Person::addr() const {
  // @@protoc_insertion_point(field_list:Person.addr)
  return addr_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_person_2eproto
