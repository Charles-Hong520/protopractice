// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: widget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_widget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_widget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_widget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_widget_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_widget_2eproto;
class SomeMessage;
class SomeMessageDefaultTypeInternal;
extern SomeMessageDefaultTypeInternal _SomeMessage_default_instance_;
class SomeMessage_Image;
class SomeMessage_ImageDefaultTypeInternal;
extern SomeMessage_ImageDefaultTypeInternal _SomeMessage_Image_default_instance_;
class SomeMessage_Text;
class SomeMessage_TextDefaultTypeInternal;
extern SomeMessage_TextDefaultTypeInternal _SomeMessage_Text_default_instance_;
class SomeMessage_Widget;
class SomeMessage_WidgetDefaultTypeInternal;
extern SomeMessage_WidgetDefaultTypeInternal _SomeMessage_Widget_default_instance_;
class SomeMessage_Window;
class SomeMessage_WindowDefaultTypeInternal;
extern SomeMessage_WindowDefaultTypeInternal _SomeMessage_Window_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SomeMessage* Arena::CreateMaybeMessage<::SomeMessage>(Arena*);
template<> ::SomeMessage_Image* Arena::CreateMaybeMessage<::SomeMessage_Image>(Arena*);
template<> ::SomeMessage_Text* Arena::CreateMaybeMessage<::SomeMessage_Text>(Arena*);
template<> ::SomeMessage_Widget* Arena::CreateMaybeMessage<::SomeMessage_Widget>(Arena*);
template<> ::SomeMessage_Window* Arena::CreateMaybeMessage<::SomeMessage_Window>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SomeMessage_Window PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Window) */ {
 public:
  inline SomeMessage_Window() : SomeMessage_Window(nullptr) {};
  virtual ~SomeMessage_Window();

  SomeMessage_Window(const SomeMessage_Window& from);
  SomeMessage_Window(SomeMessage_Window&& from) noexcept
    : SomeMessage_Window() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Window& operator=(const SomeMessage_Window& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Window& operator=(SomeMessage_Window&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SomeMessage_Window& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SomeMessage_Window* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Window*>(
               &_SomeMessage_Window_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SomeMessage_Window& a, SomeMessage_Window& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Window* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Window* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SomeMessage_Window* New() const final {
    return CreateMaybeMessage<SomeMessage_Window>(nullptr);
  }

  SomeMessage_Window* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SomeMessage_Window>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SomeMessage_Window& from);
  void MergeFrom(const SomeMessage_Window& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Window* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Window";
  }
  protected:
  explicit SomeMessage_Window(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_widget_2eproto);
    return ::descriptor_table_widget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kNameFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // string title = 1;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_title();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_title(
      std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SomeMessage.Window)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_widget_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage_Image PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Image) */ {
 public:
  inline SomeMessage_Image() : SomeMessage_Image(nullptr) {};
  virtual ~SomeMessage_Image();

  SomeMessage_Image(const SomeMessage_Image& from);
  SomeMessage_Image(SomeMessage_Image&& from) noexcept
    : SomeMessage_Image() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Image& operator=(const SomeMessage_Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Image& operator=(SomeMessage_Image&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SomeMessage_Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SomeMessage_Image* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Image*>(
               &_SomeMessage_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SomeMessage_Image& a, SomeMessage_Image& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Image* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SomeMessage_Image* New() const final {
    return CreateMaybeMessage<SomeMessage_Image>(nullptr);
  }

  SomeMessage_Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SomeMessage_Image>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SomeMessage_Image& from);
  void MergeFrom(const SomeMessage_Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Image* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Image";
  }
  protected:
  explicit SomeMessage_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_widget_2eproto);
    return ::descriptor_table_widget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrcFieldNumber = 1,
    kNameFieldNumber = 2,
    kAlignmentFieldNumber = 5,
    kHOffsetFieldNumber = 3,
    kVOffsetFieldNumber = 4,
  };
  // string src = 1;
  void clear_src();
  const std::string& src() const;
  void set_src(const std::string& value);
  void set_src(std::string&& value);
  void set_src(const char* value);
  void set_src(const char* value, size_t size);
  std::string* mutable_src();
  std::string* release_src();
  void set_allocated_src(std::string* src);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src(
      std::string* src);
  private:
  const std::string& _internal_src() const;
  void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alignment = 5;
  void clear_alignment();
  const std::string& alignment() const;
  void set_alignment(const std::string& value);
  void set_alignment(std::string&& value);
  void set_alignment(const char* value);
  void set_alignment(const char* value, size_t size);
  std::string* mutable_alignment();
  std::string* release_alignment();
  void set_allocated_alignment(std::string* alignment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alignment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alignment(
      std::string* alignment);
  private:
  const std::string& _internal_alignment() const;
  void _internal_set_alignment(const std::string& value);
  std::string* _internal_mutable_alignment();
  public:

  // uint32 hOffset = 3;
  void clear_hoffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 hoffset() const;
  void set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hoffset() const;
  void _internal_set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vOffset = 4;
  void clear_voffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 voffset() const;
  void set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voffset() const;
  void _internal_set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SomeMessage.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hoffset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_widget_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage_Text PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Text) */ {
 public:
  inline SomeMessage_Text() : SomeMessage_Text(nullptr) {};
  virtual ~SomeMessage_Text();

  SomeMessage_Text(const SomeMessage_Text& from);
  SomeMessage_Text(SomeMessage_Text&& from) noexcept
    : SomeMessage_Text() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Text& operator=(const SomeMessage_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Text& operator=(SomeMessage_Text&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SomeMessage_Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SomeMessage_Text* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Text*>(
               &_SomeMessage_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SomeMessage_Text& a, SomeMessage_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Text* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Text* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SomeMessage_Text* New() const final {
    return CreateMaybeMessage<SomeMessage_Text>(nullptr);
  }

  SomeMessage_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SomeMessage_Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SomeMessage_Text& from);
  void MergeFrom(const SomeMessage_Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Text";
  }
  protected:
  explicit SomeMessage_Text(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_widget_2eproto);
    return ::descriptor_table_widget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kStyleFieldNumber = 3,
    kNameFieldNumber = 4,
    kAlignmentFieldNumber = 7,
    kOnMouseUpFieldNumber = 8,
    kSizeFieldNumber = 2,
    kHOffsetFieldNumber = 5,
    kVOffsetFieldNumber = 6,
  };
  // string data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string style = 3;
  void clear_style();
  const std::string& style() const;
  void set_style(const std::string& value);
  void set_style(std::string&& value);
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  std::string* mutable_style();
  std::string* release_style();
  void set_allocated_style(std::string* style);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_style();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_style(
      std::string* style);
  private:
  const std::string& _internal_style() const;
  void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alignment = 7;
  void clear_alignment();
  const std::string& alignment() const;
  void set_alignment(const std::string& value);
  void set_alignment(std::string&& value);
  void set_alignment(const char* value);
  void set_alignment(const char* value, size_t size);
  std::string* mutable_alignment();
  std::string* release_alignment();
  void set_allocated_alignment(std::string* alignment);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alignment();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alignment(
      std::string* alignment);
  private:
  const std::string& _internal_alignment() const;
  void _internal_set_alignment(const std::string& value);
  std::string* _internal_mutable_alignment();
  public:

  // string onMouseUp = 8;
  void clear_onmouseup();
  const std::string& onmouseup() const;
  void set_onmouseup(const std::string& value);
  void set_onmouseup(std::string&& value);
  void set_onmouseup(const char* value);
  void set_onmouseup(const char* value, size_t size);
  std::string* mutable_onmouseup();
  std::string* release_onmouseup();
  void set_allocated_onmouseup(std::string* onmouseup);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_onmouseup();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_onmouseup(
      std::string* onmouseup);
  private:
  const std::string& _internal_onmouseup() const;
  void _internal_set_onmouseup(const std::string& value);
  std::string* _internal_mutable_onmouseup();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hOffset = 5;
  void clear_hoffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 hoffset() const;
  void set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hoffset() const;
  void _internal_set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 vOffset = 6;
  void clear_voffset();
  ::PROTOBUF_NAMESPACE_ID::uint32 voffset() const;
  void set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_voffset() const;
  void _internal_set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:SomeMessage.Text)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alignment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onmouseup_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hoffset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 voffset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_widget_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage_Widget PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage.Widget) */ {
 public:
  inline SomeMessage_Widget() : SomeMessage_Widget(nullptr) {};
  virtual ~SomeMessage_Widget();

  SomeMessage_Widget(const SomeMessage_Widget& from);
  SomeMessage_Widget(SomeMessage_Widget&& from) noexcept
    : SomeMessage_Widget() {
    *this = ::std::move(from);
  }

  inline SomeMessage_Widget& operator=(const SomeMessage_Widget& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage_Widget& operator=(SomeMessage_Widget&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SomeMessage_Widget& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SomeMessage_Widget* internal_default_instance() {
    return reinterpret_cast<const SomeMessage_Widget*>(
               &_SomeMessage_Widget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SomeMessage_Widget& a, SomeMessage_Widget& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage_Widget* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage_Widget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SomeMessage_Widget* New() const final {
    return CreateMaybeMessage<SomeMessage_Widget>(nullptr);
  }

  SomeMessage_Widget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SomeMessage_Widget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SomeMessage_Widget& from);
  void MergeFrom(const SomeMessage_Widget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage_Widget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage.Widget";
  }
  protected:
  explicit SomeMessage_Widget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_widget_2eproto);
    return ::descriptor_table_widget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWindowFieldNumber = 2,
    kDebugFieldNumber = 1,
    kImageFieldNumber = 3,
    kTextFieldNumber = 4,
  };
  // repeated .SomeMessage.Window window = 2;
  int window_size() const;
  private:
  int _internal_window_size() const;
  public:
  void clear_window();
  ::SomeMessage_Window* mutable_window(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SomeMessage_Window >*
      mutable_window();
  private:
  const ::SomeMessage_Window& _internal_window(int index) const;
  ::SomeMessage_Window* _internal_add_window();
  public:
  const ::SomeMessage_Window& window(int index) const;
  ::SomeMessage_Window* add_window();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SomeMessage_Window >&
      window() const;

  // string debug = 1;
  void clear_debug();
  const std::string& debug() const;
  void set_debug(const std::string& value);
  void set_debug(std::string&& value);
  void set_debug(const char* value);
  void set_debug(const char* value, size_t size);
  std::string* mutable_debug();
  std::string* release_debug();
  void set_allocated_debug(std::string* debug);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_debug();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_debug(
      std::string* debug);
  private:
  const std::string& _internal_debug() const;
  void _internal_set_debug(const std::string& value);
  std::string* _internal_mutable_debug();
  public:

  // .SomeMessage.Image image = 3;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const ::SomeMessage_Image& image() const;
  ::SomeMessage_Image* release_image();
  ::SomeMessage_Image* mutable_image();
  void set_allocated_image(::SomeMessage_Image* image);
  private:
  const ::SomeMessage_Image& _internal_image() const;
  ::SomeMessage_Image* _internal_mutable_image();
  public:
  void unsafe_arena_set_allocated_image(
      ::SomeMessage_Image* image);
  ::SomeMessage_Image* unsafe_arena_release_image();

  // .SomeMessage.Text text = 4;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::SomeMessage_Text& text() const;
  ::SomeMessage_Text* release_text();
  ::SomeMessage_Text* mutable_text();
  void set_allocated_text(::SomeMessage_Text* text);
  private:
  const ::SomeMessage_Text& _internal_text() const;
  ::SomeMessage_Text* _internal_mutable_text();
  public:
  void unsafe_arena_set_allocated_text(
      ::SomeMessage_Text* text);
  ::SomeMessage_Text* unsafe_arena_release_text();

  // @@protoc_insertion_point(class_scope:SomeMessage.Widget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SomeMessage_Window > window_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr debug_;
  ::SomeMessage_Image* image_;
  ::SomeMessage_Text* text_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_widget_2eproto;
};
// -------------------------------------------------------------------

class SomeMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SomeMessage) */ {
 public:
  inline SomeMessage() : SomeMessage(nullptr) {};
  virtual ~SomeMessage();

  SomeMessage(const SomeMessage& from);
  SomeMessage(SomeMessage&& from) noexcept
    : SomeMessage() {
    *this = ::std::move(from);
  }

  inline SomeMessage& operator=(const SomeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SomeMessage& operator=(SomeMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SomeMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SomeMessage* internal_default_instance() {
    return reinterpret_cast<const SomeMessage*>(
               &_SomeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SomeMessage& a, SomeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SomeMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SomeMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SomeMessage* New() const final {
    return CreateMaybeMessage<SomeMessage>(nullptr);
  }

  SomeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SomeMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SomeMessage& from);
  void MergeFrom(const SomeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SomeMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SomeMessage";
  }
  protected:
  explicit SomeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_widget_2eproto);
    return ::descriptor_table_widget_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SomeMessage_Window Window;
  typedef SomeMessage_Image Image;
  typedef SomeMessage_Text Text;
  typedef SomeMessage_Widget Widget;

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetFieldNumber = 1,
  };
  // .SomeMessage.Widget widget = 1;
  bool has_widget() const;
  private:
  bool _internal_has_widget() const;
  public:
  void clear_widget();
  const ::SomeMessage_Widget& widget() const;
  ::SomeMessage_Widget* release_widget();
  ::SomeMessage_Widget* mutable_widget();
  void set_allocated_widget(::SomeMessage_Widget* widget);
  private:
  const ::SomeMessage_Widget& _internal_widget() const;
  ::SomeMessage_Widget* _internal_mutable_widget();
  public:
  void unsafe_arena_set_allocated_widget(
      ::SomeMessage_Widget* widget);
  ::SomeMessage_Widget* unsafe_arena_release_widget();

  // @@protoc_insertion_point(class_scope:SomeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::SomeMessage_Widget* widget_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_widget_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SomeMessage_Window

// string title = 1;
inline void SomeMessage_Window::clear_title() {
  title_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Window::title() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Window.title)
  return _internal_title();
}
inline void SomeMessage_Window::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Window.title)
}
inline std::string* SomeMessage_Window::mutable_title() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Window.title)
  return _internal_mutable_title();
}
inline const std::string& SomeMessage_Window::_internal_title() const {
  return title_.Get();
}
inline void SomeMessage_Window::_internal_set_title(const std::string& value) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Window::set_title(std::string&& value) {
  
  title_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Window.title)
}
inline void SomeMessage_Window::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Window.title)
}
inline void SomeMessage_Window::set_title(const char* value,
    size_t size) {
  
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Window.title)
}
inline std::string* SomeMessage_Window::_internal_mutable_title() {
  
  return title_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Window::release_title() {
  // @@protoc_insertion_point(field_release:SomeMessage.Window.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Window::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Window.title)
}
inline std::string* SomeMessage_Window::unsafe_arena_release_title() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Window.title)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return title_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Window::unsafe_arena_set_allocated_title(
    std::string* title) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (title != nullptr) {
    
  } else {
    
  }
  title_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      title, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Window.title)
}

// string name = 2;
inline void SomeMessage_Window::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Window::name() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Window.name)
  return _internal_name();
}
inline void SomeMessage_Window::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Window.name)
}
inline std::string* SomeMessage_Window::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Window.name)
  return _internal_mutable_name();
}
inline const std::string& SomeMessage_Window::_internal_name() const {
  return name_.Get();
}
inline void SomeMessage_Window::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Window::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Window.name)
}
inline void SomeMessage_Window::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Window.name)
}
inline void SomeMessage_Window::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Window.name)
}
inline std::string* SomeMessage_Window::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Window::release_name() {
  // @@protoc_insertion_point(field_release:SomeMessage.Window.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Window::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Window.name)
}
inline std::string* SomeMessage_Window::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Window.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Window::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Window.name)
}

// uint32 width = 3;
inline void SomeMessage_Window::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Window::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Window::width() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Window.width)
  return _internal_width();
}
inline void SomeMessage_Window::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void SomeMessage_Window::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Window.width)
}

// uint32 height = 4;
inline void SomeMessage_Window::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Window::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Window::height() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Window.height)
  return _internal_height();
}
inline void SomeMessage_Window::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void SomeMessage_Window::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Window.height)
}

// -------------------------------------------------------------------

// SomeMessage_Image

// string src = 1;
inline void SomeMessage_Image::clear_src() {
  src_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Image::src() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Image.src)
  return _internal_src();
}
inline void SomeMessage_Image::set_src(const std::string& value) {
  _internal_set_src(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Image.src)
}
inline std::string* SomeMessage_Image::mutable_src() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Image.src)
  return _internal_mutable_src();
}
inline const std::string& SomeMessage_Image::_internal_src() const {
  return src_.Get();
}
inline void SomeMessage_Image::_internal_set_src(const std::string& value) {
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Image::set_src(std::string&& value) {
  
  src_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Image.src)
}
inline void SomeMessage_Image::set_src(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Image.src)
}
inline void SomeMessage_Image::set_src(const char* value,
    size_t size) {
  
  src_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Image.src)
}
inline std::string* SomeMessage_Image::_internal_mutable_src() {
  
  return src_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Image::release_src() {
  // @@protoc_insertion_point(field_release:SomeMessage.Image.src)
  return src_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Image::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    
  } else {
    
  }
  src_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Image.src)
}
inline std::string* SomeMessage_Image::unsafe_arena_release_src() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Image.src)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return src_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Image::unsafe_arena_set_allocated_src(
    std::string* src) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src != nullptr) {
    
  } else {
    
  }
  src_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Image.src)
}

// string name = 2;
inline void SomeMessage_Image::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Image::name() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Image.name)
  return _internal_name();
}
inline void SomeMessage_Image::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Image.name)
}
inline std::string* SomeMessage_Image::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Image.name)
  return _internal_mutable_name();
}
inline const std::string& SomeMessage_Image::_internal_name() const {
  return name_.Get();
}
inline void SomeMessage_Image::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Image::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Image.name)
}
inline void SomeMessage_Image::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Image.name)
}
inline void SomeMessage_Image::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Image.name)
}
inline std::string* SomeMessage_Image::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Image::release_name() {
  // @@protoc_insertion_point(field_release:SomeMessage.Image.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Image::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Image.name)
}
inline std::string* SomeMessage_Image::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Image.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Image::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Image.name)
}

// uint32 hOffset = 3;
inline void SomeMessage_Image::clear_hoffset() {
  hoffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Image::_internal_hoffset() const {
  return hoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Image::hoffset() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Image.hOffset)
  return _internal_hoffset();
}
inline void SomeMessage_Image::_internal_set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hoffset_ = value;
}
inline void SomeMessage_Image::set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hoffset(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Image.hOffset)
}

// uint32 vOffset = 4;
inline void SomeMessage_Image::clear_voffset() {
  voffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Image::_internal_voffset() const {
  return voffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Image::voffset() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Image.vOffset)
  return _internal_voffset();
}
inline void SomeMessage_Image::_internal_set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  voffset_ = value;
}
inline void SomeMessage_Image::set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voffset(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Image.vOffset)
}

// string alignment = 5;
inline void SomeMessage_Image::clear_alignment() {
  alignment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Image::alignment() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Image.alignment)
  return _internal_alignment();
}
inline void SomeMessage_Image::set_alignment(const std::string& value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Image.alignment)
}
inline std::string* SomeMessage_Image::mutable_alignment() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Image.alignment)
  return _internal_mutable_alignment();
}
inline const std::string& SomeMessage_Image::_internal_alignment() const {
  return alignment_.Get();
}
inline void SomeMessage_Image::_internal_set_alignment(const std::string& value) {
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Image::set_alignment(std::string&& value) {
  
  alignment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Image.alignment)
}
inline void SomeMessage_Image::set_alignment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Image.alignment)
}
inline void SomeMessage_Image::set_alignment(const char* value,
    size_t size) {
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Image.alignment)
}
inline std::string* SomeMessage_Image::_internal_mutable_alignment() {
  
  return alignment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Image::release_alignment() {
  // @@protoc_insertion_point(field_release:SomeMessage.Image.alignment)
  return alignment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Image::set_allocated_alignment(std::string* alignment) {
  if (alignment != nullptr) {
    
  } else {
    
  }
  alignment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alignment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Image.alignment)
}
inline std::string* SomeMessage_Image::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Image.alignment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alignment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Image::unsafe_arena_set_allocated_alignment(
    std::string* alignment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alignment != nullptr) {
    
  } else {
    
  }
  alignment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alignment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Image.alignment)
}

// -------------------------------------------------------------------

// SomeMessage_Text

// string data = 1;
inline void SomeMessage_Text::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Text::data() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.data)
  return _internal_data();
}
inline void SomeMessage_Text::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.data)
}
inline std::string* SomeMessage_Text::mutable_data() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Text.data)
  return _internal_mutable_data();
}
inline const std::string& SomeMessage_Text::_internal_data() const {
  return data_.Get();
}
inline void SomeMessage_Text::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Text::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Text.data)
}
inline void SomeMessage_Text::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Text.data)
}
inline void SomeMessage_Text::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Text.data)
}
inline std::string* SomeMessage_Text::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Text::release_data() {
  // @@protoc_insertion_point(field_release:SomeMessage.Text.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Text::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Text.data)
}
inline std::string* SomeMessage_Text::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Text.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Text::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Text.data)
}

// uint32 size = 2;
inline void SomeMessage_Text::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::size() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.size)
  return _internal_size();
}
inline void SomeMessage_Text::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void SomeMessage_Text::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.size)
}

// string style = 3;
inline void SomeMessage_Text::clear_style() {
  style_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Text::style() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.style)
  return _internal_style();
}
inline void SomeMessage_Text::set_style(const std::string& value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.style)
}
inline std::string* SomeMessage_Text::mutable_style() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Text.style)
  return _internal_mutable_style();
}
inline const std::string& SomeMessage_Text::_internal_style() const {
  return style_.Get();
}
inline void SomeMessage_Text::_internal_set_style(const std::string& value) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Text::set_style(std::string&& value) {
  
  style_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Text.style)
}
inline void SomeMessage_Text::set_style(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Text.style)
}
inline void SomeMessage_Text::set_style(const char* value,
    size_t size) {
  
  style_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Text.style)
}
inline std::string* SomeMessage_Text::_internal_mutable_style() {
  
  return style_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Text::release_style() {
  // @@protoc_insertion_point(field_release:SomeMessage.Text.style)
  return style_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Text::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    
  } else {
    
  }
  style_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Text.style)
}
inline std::string* SomeMessage_Text::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Text.style)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return style_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Text::unsafe_arena_set_allocated_style(
    std::string* style) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (style != nullptr) {
    
  } else {
    
  }
  style_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      style, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Text.style)
}

// string name = 4;
inline void SomeMessage_Text::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Text::name() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.name)
  return _internal_name();
}
inline void SomeMessage_Text::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.name)
}
inline std::string* SomeMessage_Text::mutable_name() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Text.name)
  return _internal_mutable_name();
}
inline const std::string& SomeMessage_Text::_internal_name() const {
  return name_.Get();
}
inline void SomeMessage_Text::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Text::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Text.name)
}
inline void SomeMessage_Text::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Text.name)
}
inline void SomeMessage_Text::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Text.name)
}
inline std::string* SomeMessage_Text::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Text::release_name() {
  // @@protoc_insertion_point(field_release:SomeMessage.Text.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Text::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Text.name)
}
inline std::string* SomeMessage_Text::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Text.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Text::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Text.name)
}

// uint32 hOffset = 5;
inline void SomeMessage_Text::clear_hoffset() {
  hoffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::_internal_hoffset() const {
  return hoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::hoffset() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.hOffset)
  return _internal_hoffset();
}
inline void SomeMessage_Text::_internal_set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hoffset_ = value;
}
inline void SomeMessage_Text::set_hoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hoffset(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.hOffset)
}

// uint32 vOffset = 6;
inline void SomeMessage_Text::clear_voffset() {
  voffset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::_internal_voffset() const {
  return voffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SomeMessage_Text::voffset() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.vOffset)
  return _internal_voffset();
}
inline void SomeMessage_Text::_internal_set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  voffset_ = value;
}
inline void SomeMessage_Text::set_voffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_voffset(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.vOffset)
}

// string alignment = 7;
inline void SomeMessage_Text::clear_alignment() {
  alignment_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Text::alignment() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.alignment)
  return _internal_alignment();
}
inline void SomeMessage_Text::set_alignment(const std::string& value) {
  _internal_set_alignment(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.alignment)
}
inline std::string* SomeMessage_Text::mutable_alignment() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Text.alignment)
  return _internal_mutable_alignment();
}
inline const std::string& SomeMessage_Text::_internal_alignment() const {
  return alignment_.Get();
}
inline void SomeMessage_Text::_internal_set_alignment(const std::string& value) {
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Text::set_alignment(std::string&& value) {
  
  alignment_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Text.alignment)
}
inline void SomeMessage_Text::set_alignment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Text.alignment)
}
inline void SomeMessage_Text::set_alignment(const char* value,
    size_t size) {
  
  alignment_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Text.alignment)
}
inline std::string* SomeMessage_Text::_internal_mutable_alignment() {
  
  return alignment_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Text::release_alignment() {
  // @@protoc_insertion_point(field_release:SomeMessage.Text.alignment)
  return alignment_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Text::set_allocated_alignment(std::string* alignment) {
  if (alignment != nullptr) {
    
  } else {
    
  }
  alignment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alignment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Text.alignment)
}
inline std::string* SomeMessage_Text::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Text.alignment)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alignment_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Text::unsafe_arena_set_allocated_alignment(
    std::string* alignment) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alignment != nullptr) {
    
  } else {
    
  }
  alignment_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alignment, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Text.alignment)
}

// string onMouseUp = 8;
inline void SomeMessage_Text::clear_onmouseup() {
  onmouseup_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Text::onmouseup() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Text.onMouseUp)
  return _internal_onmouseup();
}
inline void SomeMessage_Text::set_onmouseup(const std::string& value) {
  _internal_set_onmouseup(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Text.onMouseUp)
}
inline std::string* SomeMessage_Text::mutable_onmouseup() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Text.onMouseUp)
  return _internal_mutable_onmouseup();
}
inline const std::string& SomeMessage_Text::_internal_onmouseup() const {
  return onmouseup_.Get();
}
inline void SomeMessage_Text::_internal_set_onmouseup(const std::string& value) {
  
  onmouseup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Text::set_onmouseup(std::string&& value) {
  
  onmouseup_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Text.onMouseUp)
}
inline void SomeMessage_Text::set_onmouseup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  onmouseup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Text.onMouseUp)
}
inline void SomeMessage_Text::set_onmouseup(const char* value,
    size_t size) {
  
  onmouseup_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Text.onMouseUp)
}
inline std::string* SomeMessage_Text::_internal_mutable_onmouseup() {
  
  return onmouseup_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Text::release_onmouseup() {
  // @@protoc_insertion_point(field_release:SomeMessage.Text.onMouseUp)
  return onmouseup_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Text::set_allocated_onmouseup(std::string* onmouseup) {
  if (onmouseup != nullptr) {
    
  } else {
    
  }
  onmouseup_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onmouseup,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Text.onMouseUp)
}
inline std::string* SomeMessage_Text::unsafe_arena_release_onmouseup() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Text.onMouseUp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return onmouseup_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Text::unsafe_arena_set_allocated_onmouseup(
    std::string* onmouseup) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (onmouseup != nullptr) {
    
  } else {
    
  }
  onmouseup_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      onmouseup, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Text.onMouseUp)
}

// -------------------------------------------------------------------

// SomeMessage_Widget

// string debug = 1;
inline void SomeMessage_Widget::clear_debug() {
  debug_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SomeMessage_Widget::debug() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Widget.debug)
  return _internal_debug();
}
inline void SomeMessage_Widget::set_debug(const std::string& value) {
  _internal_set_debug(value);
  // @@protoc_insertion_point(field_set:SomeMessage.Widget.debug)
}
inline std::string* SomeMessage_Widget::mutable_debug() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Widget.debug)
  return _internal_mutable_debug();
}
inline const std::string& SomeMessage_Widget::_internal_debug() const {
  return debug_.Get();
}
inline void SomeMessage_Widget::_internal_set_debug(const std::string& value) {
  
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SomeMessage_Widget::set_debug(std::string&& value) {
  
  debug_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SomeMessage.Widget.debug)
}
inline void SomeMessage_Widget::set_debug(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SomeMessage.Widget.debug)
}
inline void SomeMessage_Widget::set_debug(const char* value,
    size_t size) {
  
  debug_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SomeMessage.Widget.debug)
}
inline std::string* SomeMessage_Widget::_internal_mutable_debug() {
  
  return debug_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SomeMessage_Widget::release_debug() {
  // @@protoc_insertion_point(field_release:SomeMessage.Widget.debug)
  return debug_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SomeMessage_Widget::set_allocated_debug(std::string* debug) {
  if (debug != nullptr) {
    
  } else {
    
  }
  debug_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), debug,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Widget.debug)
}
inline std::string* SomeMessage_Widget::unsafe_arena_release_debug() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SomeMessage.Widget.debug)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return debug_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SomeMessage_Widget::unsafe_arena_set_allocated_debug(
    std::string* debug) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (debug != nullptr) {
    
  } else {
    
  }
  debug_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      debug, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Widget.debug)
}

// repeated .SomeMessage.Window window = 2;
inline int SomeMessage_Widget::_internal_window_size() const {
  return window_.size();
}
inline int SomeMessage_Widget::window_size() const {
  return _internal_window_size();
}
inline void SomeMessage_Widget::clear_window() {
  window_.Clear();
}
inline ::SomeMessage_Window* SomeMessage_Widget::mutable_window(int index) {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Widget.window)
  return window_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SomeMessage_Window >*
SomeMessage_Widget::mutable_window() {
  // @@protoc_insertion_point(field_mutable_list:SomeMessage.Widget.window)
  return &window_;
}
inline const ::SomeMessage_Window& SomeMessage_Widget::_internal_window(int index) const {
  return window_.Get(index);
}
inline const ::SomeMessage_Window& SomeMessage_Widget::window(int index) const {
  // @@protoc_insertion_point(field_get:SomeMessage.Widget.window)
  return _internal_window(index);
}
inline ::SomeMessage_Window* SomeMessage_Widget::_internal_add_window() {
  return window_.Add();
}
inline ::SomeMessage_Window* SomeMessage_Widget::add_window() {
  // @@protoc_insertion_point(field_add:SomeMessage.Widget.window)
  return _internal_add_window();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SomeMessage_Window >&
SomeMessage_Widget::window() const {
  // @@protoc_insertion_point(field_list:SomeMessage.Widget.window)
  return window_;
}

// .SomeMessage.Image image = 3;
inline bool SomeMessage_Widget::_internal_has_image() const {
  return this != internal_default_instance() && image_ != nullptr;
}
inline bool SomeMessage_Widget::has_image() const {
  return _internal_has_image();
}
inline void SomeMessage_Widget::clear_image() {
  if (GetArena() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
inline const ::SomeMessage_Image& SomeMessage_Widget::_internal_image() const {
  const ::SomeMessage_Image* p = image_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SomeMessage_Image*>(
      &::_SomeMessage_Image_default_instance_);
}
inline const ::SomeMessage_Image& SomeMessage_Widget::image() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Widget.image)
  return _internal_image();
}
inline void SomeMessage_Widget::unsafe_arena_set_allocated_image(
    ::SomeMessage_Image* image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_);
  }
  image_ = image;
  if (image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Widget.image)
}
inline ::SomeMessage_Image* SomeMessage_Widget::release_image() {
  auto temp = unsafe_arena_release_image();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SomeMessage_Image* SomeMessage_Widget::unsafe_arena_release_image() {
  // @@protoc_insertion_point(field_release:SomeMessage.Widget.image)
  
  ::SomeMessage_Image* temp = image_;
  image_ = nullptr;
  return temp;
}
inline ::SomeMessage_Image* SomeMessage_Widget::_internal_mutable_image() {
  
  if (image_ == nullptr) {
    auto* p = CreateMaybeMessage<::SomeMessage_Image>(GetArena());
    image_ = p;
  }
  return image_;
}
inline ::SomeMessage_Image* SomeMessage_Widget::mutable_image() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Widget.image)
  return _internal_mutable_image();
}
inline void SomeMessage_Widget::set_allocated_image(::SomeMessage_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete image_;
  }
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    
  } else {
    
  }
  image_ = image;
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Widget.image)
}

// .SomeMessage.Text text = 4;
inline bool SomeMessage_Widget::_internal_has_text() const {
  return this != internal_default_instance() && text_ != nullptr;
}
inline bool SomeMessage_Widget::has_text() const {
  return _internal_has_text();
}
inline void SomeMessage_Widget::clear_text() {
  if (GetArena() == nullptr && text_ != nullptr) {
    delete text_;
  }
  text_ = nullptr;
}
inline const ::SomeMessage_Text& SomeMessage_Widget::_internal_text() const {
  const ::SomeMessage_Text* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SomeMessage_Text*>(
      &::_SomeMessage_Text_default_instance_);
}
inline const ::SomeMessage_Text& SomeMessage_Widget::text() const {
  // @@protoc_insertion_point(field_get:SomeMessage.Widget.text)
  return _internal_text();
}
inline void SomeMessage_Widget::unsafe_arena_set_allocated_text(
    ::SomeMessage_Text* text) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text_);
  }
  text_ = text;
  if (text) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.Widget.text)
}
inline ::SomeMessage_Text* SomeMessage_Widget::release_text() {
  auto temp = unsafe_arena_release_text();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SomeMessage_Text* SomeMessage_Widget::unsafe_arena_release_text() {
  // @@protoc_insertion_point(field_release:SomeMessage.Widget.text)
  
  ::SomeMessage_Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::SomeMessage_Text* SomeMessage_Widget::_internal_mutable_text() {
  
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::SomeMessage_Text>(GetArena());
    text_ = p;
  }
  return text_;
}
inline ::SomeMessage_Text* SomeMessage_Widget::mutable_text() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.Widget.text)
  return _internal_mutable_text();
}
inline void SomeMessage_Widget::set_allocated_text(::SomeMessage_Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(text);
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    
  } else {
    
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.Widget.text)
}

// -------------------------------------------------------------------

// SomeMessage

// .SomeMessage.Widget widget = 1;
inline bool SomeMessage::_internal_has_widget() const {
  return this != internal_default_instance() && widget_ != nullptr;
}
inline bool SomeMessage::has_widget() const {
  return _internal_has_widget();
}
inline void SomeMessage::clear_widget() {
  if (GetArena() == nullptr && widget_ != nullptr) {
    delete widget_;
  }
  widget_ = nullptr;
}
inline const ::SomeMessage_Widget& SomeMessage::_internal_widget() const {
  const ::SomeMessage_Widget* p = widget_;
  return p != nullptr ? *p : *reinterpret_cast<const ::SomeMessage_Widget*>(
      &::_SomeMessage_Widget_default_instance_);
}
inline const ::SomeMessage_Widget& SomeMessage::widget() const {
  // @@protoc_insertion_point(field_get:SomeMessage.widget)
  return _internal_widget();
}
inline void SomeMessage::unsafe_arena_set_allocated_widget(
    ::SomeMessage_Widget* widget) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(widget_);
  }
  widget_ = widget;
  if (widget) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SomeMessage.widget)
}
inline ::SomeMessage_Widget* SomeMessage::release_widget() {
  auto temp = unsafe_arena_release_widget();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::SomeMessage_Widget* SomeMessage::unsafe_arena_release_widget() {
  // @@protoc_insertion_point(field_release:SomeMessage.widget)
  
  ::SomeMessage_Widget* temp = widget_;
  widget_ = nullptr;
  return temp;
}
inline ::SomeMessage_Widget* SomeMessage::_internal_mutable_widget() {
  
  if (widget_ == nullptr) {
    auto* p = CreateMaybeMessage<::SomeMessage_Widget>(GetArena());
    widget_ = p;
  }
  return widget_;
}
inline ::SomeMessage_Widget* SomeMessage::mutable_widget() {
  // @@protoc_insertion_point(field_mutable:SomeMessage.widget)
  return _internal_mutable_widget();
}
inline void SomeMessage::set_allocated_widget(::SomeMessage_Widget* widget) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete widget_;
  }
  if (widget) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(widget);
    if (message_arena != submessage_arena) {
      widget = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widget, submessage_arena);
    }
    
  } else {
    
  }
  widget_ = widget;
  // @@protoc_insertion_point(field_set_allocated:SomeMessage.widget)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_widget_2eproto
